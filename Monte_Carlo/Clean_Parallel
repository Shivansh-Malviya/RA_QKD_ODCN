{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":9529498,"sourceType":"datasetVersion","datasetId":5803096},{"sourceId":9530258,"sourceType":"datasetVersion","datasetId":5803782},{"sourceId":9530278,"sourceType":"datasetVersion","datasetId":5803820}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install qiskit qiskit-aer","metadata":{"execution":{"iopub.status.busy":"2024-10-02T09:14:10.310130Z","iopub.execute_input":"2024-10-02T09:14:10.310589Z","iopub.status.idle":"2024-10-02T09:14:24.018739Z","shell.execute_reply.started":"2024-10-02T09:14:10.310547Z","shell.execute_reply":"2024-10-02T09:14:24.017421Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"Requirement already satisfied: qiskit in /opt/conda/lib/python3.10/site-packages (1.2.2)\nRequirement already satisfied: qiskit-aer in /opt/conda/lib/python3.10/site-packages (0.15.1)\nRequirement already satisfied: rustworkx>=0.15.0 in /opt/conda/lib/python3.10/site-packages (from qiskit) (0.15.1)\nRequirement already satisfied: numpy<3,>=1.17 in /opt/conda/lib/python3.10/site-packages (from qiskit) (1.26.4)\nRequirement already satisfied: scipy>=1.5 in /opt/conda/lib/python3.10/site-packages (from qiskit) (1.14.1)\nRequirement already satisfied: sympy>=1.3 in /opt/conda/lib/python3.10/site-packages (from qiskit) (1.12)\nRequirement already satisfied: dill>=0.3 in /opt/conda/lib/python3.10/site-packages (from qiskit) (0.3.8)\nRequirement already satisfied: python-dateutil>=2.8.0 in /opt/conda/lib/python3.10/site-packages (from qiskit) (2.9.0.post0)\nRequirement already satisfied: stevedore>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from qiskit) (5.3.0)\nRequirement already satisfied: typing-extensions in /opt/conda/lib/python3.10/site-packages (from qiskit) (4.12.2)\nRequirement already satisfied: symengine>=0.11 in /opt/conda/lib/python3.10/site-packages (from qiskit) (0.13.0)\nRequirement already satisfied: psutil>=5 in /opt/conda/lib/python3.10/site-packages (from qiskit-aer) (5.9.3)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.0->qiskit) (1.16.0)\nRequirement already satisfied: pbr>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from stevedore>=3.0.0->qiskit) (6.1.0)\nRequirement already satisfied: mpmath>=0.19 in /opt/conda/lib/python3.10/site-packages (from sympy>=1.3->qiskit) (1.3.0)\n","output_type":"stream"}]},{"cell_type":"code","source":"#!/usr/bin/env python\n# coding: utf-8\n\nimport numpy as np\nimport time\nimport matplotlib.pyplot as plt\nfrom qiskit import *\nfrom qiskit_aer import Aer\nfrom joblib import Parallel, delayed, cpu_count\nfrom random import randrange\nfrom functools import reduce\nfrom scipy import stats  # For confidence intervals","metadata":{"_uuid":"0ee88307-d2be-4501-a4a9-26146743dc4c","_cell_guid":"10805b9b-157b-44eb-a4a6-e2197d1109c5","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-10-02T09:14:24.021812Z","iopub.execute_input":"2024-10-02T09:14:24.022360Z","iopub.status.idle":"2024-10-02T09:14:24.030012Z","shell.execute_reply.started":"2024-10-02T09:14:24.022293Z","shell.execute_reply":"2024-10-02T09:14:24.028840Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"import sys\nsys.path.insert(1, '/kaggle/input/dependencies-key')\nimport Dependencies_Key","metadata":{"execution":{"iopub.status.busy":"2024-10-02T09:14:24.031682Z","iopub.execute_input":"2024-10-02T09:14:24.032159Z","iopub.status.idle":"2024-10-02T09:14:24.045169Z","shell.execute_reply.started":"2024-10-02T09:14:24.032105Z","shell.execute_reply":"2024-10-02T09:14:24.043455Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"# from Dependencies_Key import *\nfrom Dependencies_Key import HammingCode, AliceBob, Key    # Classes\nfrom Dependencies_Key import print_info, snr2ber, track, confidence_interval    # Functions\nnp.set_printoptions(precision = 4, linewidth = 100, threshold = np.inf)","metadata":{"_uuid":"3d7bd78f-cc16-4ace-a387-a5bb2ccfe0aa","_cell_guid":"9fe9753f-f5f0-42bd-8947-1ab577d83f8b","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-10-02T09:14:24.050230Z","iopub.execute_input":"2024-10-02T09:14:24.050822Z","iopub.status.idle":"2024-10-02T09:14:24.059551Z","shell.execute_reply.started":"2024-10-02T09:14:24.050759Z","shell.execute_reply":"2024-10-02T09:14:24.057863Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"# Run the Monte Carlo Simulation in parallel\ndef monte_carlo(num_keys, key_length, sample_size, snr_range, signal_power, batch_size = None):\n    cores = cpu_count()\n    if batch_size is None: batch_size = cores//2\n        \n    start_time = time.time()\n\n    avg_results = {\n        'avg_qber': np.zeros(len(snr_range)),\n        'avg_ber': np.zeros(len(snr_range)),\n        'avg_corrected_qber': np.zeros(len(snr_range)),\n        'avg_corrected_ber': np.zeros(len(snr_range)),\n        'keys_kept': np.zeros(len(snr_range)),\n        'keys_discarded': np.zeros(len(snr_range)),\n        'total_kept_bits': np.zeros(len(snr_range)),\n    }\n\n    # Total number of batches\n    num_batches = int(np.ceil(sample_size / batch_size))\n\n\n    # Process each batch\n    for batch_idx in range(num_batches):\n        # Determine the number of samples for this batch (to handle the last batch which may have fewer samples)\n        current_batch_size = min(batch_size, sample_size - batch_idx * batch_size)\n\n        # Run simulations for the current batch in parallel\n        parallel_results = Parallel(n_jobs = cores//2)(\n            delayed(simulate_snr_range)(snr_range, num_keys, key_length, signal_power) \n            for _ in range(current_batch_size)\n        )\n\n        # Incrementally update the running averages after each batch\n        for result in parallel_results:\n            for key in avg_results.keys():\n                # Update the running average with batch results\n                avg_results[key] += (np.array(result[key]) - avg_results[key]) / (batch_idx * batch_size + current_batch_size)\n        track(batch_idx, num_batches)\n        \n    end_time = time.time()\n    print(f\"Monte Carlo simulation completed in {end_time - start_time:.2f} seconds.\")\n    \n    return avg_results","metadata":{"_uuid":"c79c183c-5593-4e10-bc5b-fe65bb6b6241","_cell_guid":"74641d55-6ba3-473c-a4d8-68150f3cf17f","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-10-02T09:14:24.061270Z","iopub.execute_input":"2024-10-02T09:14:24.061754Z","iopub.status.idle":"2024-10-02T09:14:24.078388Z","shell.execute_reply.started":"2024-10-02T09:14:24.061700Z","shell.execute_reply":"2024-10-02T09:14:24.077106Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"%run '/kaggle/input/simulate-for-snr-ipynb/Simulate_for_snr.ipynb'","metadata":{"execution":{"iopub.status.busy":"2024-10-02T09:14:24.080139Z","iopub.execute_input":"2024-10-02T09:14:24.081393Z","iopub.status.idle":"2024-10-02T09:14:24.137378Z","shell.execute_reply.started":"2024-10-02T09:14:24.081324Z","shell.execute_reply":"2024-10-02T09:14:24.135998Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"# sys.path.insert(1, '/kaggle/input/simulate-for-snr')\n# import Simulate_for_snr","metadata":{"_uuid":"24761eab-5d50-4adc-b94d-6a6724fd0957","_cell_guid":"d51bf6bd-7b67-434c-bdf4-a284bf3fe211","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-10-02T09:14:24.140833Z","iopub.execute_input":"2024-10-02T09:14:24.141189Z","iopub.status.idle":"2024-10-02T09:14:24.146880Z","shell.execute_reply.started":"2024-10-02T09:14:24.141151Z","shell.execute_reply":"2024-10-02T09:14:24.145660Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"def simulate_snr_range(snr_range, num_keys, key_length, signal_power):\n    results = np.zeros(len(snr_range), dtype=object)  # Correct initialization\n    for snr_index, snr_db in enumerate(snr_range): \n        results[snr_index] = simulate_for_snr(snr_db, num_keys, key_length, signal_power)\n    return results","metadata":{"_uuid":"a4f7ce35-db3f-4090-b317-44b14b8c5589","_cell_guid":"3777de95-6cc4-4d7f-abe1-aae1429dfd14","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-10-02T09:14:24.148473Z","iopub.execute_input":"2024-10-02T09:14:24.148829Z","iopub.status.idle":"2024-10-02T09:14:24.157316Z","shell.execute_reply.started":"2024-10-02T09:14:24.148792Z","shell.execute_reply":"2024-10-02T09:14:24.156332Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"%%time\n%%capture\n# Parameters\n\nsample_size = 10e3\nkey_length = 32\nnum_keys = 100\nSNR_RANGE = np.arange(0, 12.5, 0.5)\nsignal_power = 0.15\n\nmemory_efficient = True\nsimulate_snr_range(SNR_RANGE, num_keys, key_length, signal_power)\n# Run the simulation and plot the results\n# results = monte_carlo(num_keys, key_length, sample_size, SNR_RANGE, signal_power)","metadata":{"_uuid":"565d1ca0-73ab-4283-b69b-d89b1b638884","_cell_guid":"39520b45-d728-477d-9f1e-95c4fda8c4ed","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-10-02T09:14:24.158968Z","iopub.execute_input":"2024-10-02T09:14:24.159366Z","iopub.status.idle":"2024-10-02T09:14:34.351556Z","shell.execute_reply.started":"2024-10-02T09:14:24.159309Z","shell.execute_reply":"2024-10-02T09:14:34.350493Z"},"trusted":true},"execution_count":32,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[32], line 10\u001b[0m\n\u001b[1;32m      7\u001b[0m signal_power \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0.15\u001b[39m\n\u001b[1;32m      9\u001b[0m memory_efficient \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[0;32m---> 10\u001b[0m \u001b[43msimulate_snr_range\u001b[49m\u001b[43m(\u001b[49m\u001b[43mSNR_RANGE\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnum_keys\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkey_length\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msignal_power\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;66;03m# Run the simulation and plot the results\u001b[39;00m\n\u001b[1;32m     12\u001b[0m \u001b[38;5;66;03m# results = monte_carlo(num_keys, key_length, sample_size, SNR_RANGE, signal_power)\u001b[39;00m\n","Cell \u001b[0;32mIn[31], line 4\u001b[0m, in \u001b[0;36msimulate_snr_range\u001b[0;34m(snr_range, num_keys, key_length, signal_power)\u001b[0m\n\u001b[1;32m      2\u001b[0m results \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mzeros(\u001b[38;5;28mlen\u001b[39m(snr_range), dtype\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mobject\u001b[39m)  \u001b[38;5;66;03m# Correct initialization\u001b[39;00m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m snr_index, snr_db \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(snr_range): \n\u001b[0;32m----> 4\u001b[0m     results[snr_index] \u001b[38;5;241m=\u001b[39m \u001b[43msimulate_for_snr\u001b[49m\u001b[43m(\u001b[49m\u001b[43msnr_db\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnum_keys\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkey_length\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msignal_power\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m results\n","File \u001b[0;32m/tmp/ipykernel_30/3117031127.py:37\u001b[0m, in \u001b[0;36msimulate_for_snr\u001b[0;34m(snr_db, num_keys, key_length, signal_power)\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(num_keys):\n\u001b[1;32m     36\u001b[0m     Keys[i]\u001b[38;5;241m.\u001b[39mgenerate_random_bases(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mBob\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m---> 37\u001b[0m     \u001b[43mKeys\u001b[49m\u001b[43m[\u001b[49m\u001b[43mi\u001b[49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmeasure\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mBob\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     39\u001b[0m \u001b[38;5;66;03m# Sifting\u001b[39;00m\n\u001b[1;32m     40\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(num_keys):\n","File \u001b[0;32m/kaggle/input/dependencies-key/Dependencies_Key.py:413\u001b[0m, in \u001b[0;36mKey.measure\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m    411\u001b[0m \u001b[38;5;66;03m# Execute on Simulator\u001b[39;00m\n\u001b[1;32m    412\u001b[0m simulator \u001b[38;5;241m=\u001b[39m Aer\u001b[38;5;241m.\u001b[39mget_backend(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mqasm_simulator\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m--> 413\u001b[0m transpiled_circuit \u001b[38;5;241m=\u001b[39m \u001b[43mtranspile\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mqc\u001b[49m\u001b[43m[\u001b[49m\u001b[43mi\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msimulator\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    414\u001b[0m result \u001b[38;5;241m=\u001b[39m simulator\u001b[38;5;241m.\u001b[39mrun(transpiled_circuit, shots \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m)\u001b[38;5;241m.\u001b[39mresult()\n\u001b[1;32m    415\u001b[0m counts \u001b[38;5;241m=\u001b[39m result\u001b[38;5;241m.\u001b[39mget_counts()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/qiskit/compiler/transpiler.py:366\u001b[0m, in \u001b[0;36mtranspile\u001b[0;34m(circuits, backend, basis_gates, inst_map, coupling_map, backend_properties, initial_layout, layout_method, routing_method, translation_method, scheduling_method, instruction_durations, dt, approximation_degree, timing_constraints, seed_transpiler, optimization_level, callback, output_name, unitary_synthesis_method, unitary_synthesis_plugin_config, target, hls_config, init_method, optimization_method, ignore_backend_supplied_default_methods, num_processes)\u001b[0m\n\u001b[1;32m    361\u001b[0m _check_circuits_coupling_map(circuits, coupling_map, backend)\n\u001b[1;32m    363\u001b[0m \u001b[38;5;66;03m# Edge cases require using the old model (loose constraints) instead of building a target,\u001b[39;00m\n\u001b[1;32m    364\u001b[0m \u001b[38;5;66;03m# but we don't populate the passmanager config with loose constraints unless it's one of\u001b[39;00m\n\u001b[1;32m    365\u001b[0m \u001b[38;5;66;03m# the known edge cases to control the execution path.\u001b[39;00m\n\u001b[0;32m--> 366\u001b[0m pm \u001b[38;5;241m=\u001b[39m \u001b[43mgenerate_preset_pass_manager\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    367\u001b[0m \u001b[43m    \u001b[49m\u001b[43moptimization_level\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    368\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtarget\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtarget\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    369\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbackend\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbackend\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    370\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbasis_gates\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbasis_gates\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    371\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcoupling_map\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcoupling_map\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    372\u001b[0m \u001b[43m    \u001b[49m\u001b[43minstruction_durations\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minstruction_durations\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    373\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbackend_properties\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbackend_properties\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    374\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtiming_constraints\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtiming_constraints\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    375\u001b[0m \u001b[43m    \u001b[49m\u001b[43minst_map\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minst_map\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    376\u001b[0m \u001b[43m    \u001b[49m\u001b[43minitial_layout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minitial_layout\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    377\u001b[0m \u001b[43m    \u001b[49m\u001b[43mlayout_method\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlayout_method\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    378\u001b[0m \u001b[43m    \u001b[49m\u001b[43mrouting_method\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrouting_method\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    379\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtranslation_method\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtranslation_method\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    380\u001b[0m \u001b[43m    \u001b[49m\u001b[43mscheduling_method\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mscheduling_method\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    381\u001b[0m \u001b[43m    \u001b[49m\u001b[43mapproximation_degree\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mapproximation_degree\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    382\u001b[0m \u001b[43m    \u001b[49m\u001b[43mseed_transpiler\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mseed_transpiler\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    383\u001b[0m \u001b[43m    \u001b[49m\u001b[43munitary_synthesis_method\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43munitary_synthesis_method\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    384\u001b[0m \u001b[43m    \u001b[49m\u001b[43munitary_synthesis_plugin_config\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43munitary_synthesis_plugin_config\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    385\u001b[0m \u001b[43m    \u001b[49m\u001b[43mhls_config\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mhls_config\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    386\u001b[0m \u001b[43m    \u001b[49m\u001b[43minit_method\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minit_method\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    387\u001b[0m \u001b[43m    \u001b[49m\u001b[43moptimization_method\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43moptimization_method\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    388\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdt\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdt\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    389\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    391\u001b[0m out_circuits \u001b[38;5;241m=\u001b[39m pm\u001b[38;5;241m.\u001b[39mrun(circuits, callback\u001b[38;5;241m=\u001b[39mcallback, num_processes\u001b[38;5;241m=\u001b[39mnum_processes)\n\u001b[1;32m    393\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m name, circ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(output_name, out_circuits):\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/qiskit/transpiler/preset_passmanagers/generate_preset_pass_manager.py:282\u001b[0m, in \u001b[0;36mgenerate_preset_pass_manager\u001b[0;34m(optimization_level, backend, target, basis_gates, inst_map, coupling_map, instruction_durations, backend_properties, timing_constraints, initial_layout, layout_method, routing_method, translation_method, scheduling_method, approximation_degree, seed_transpiler, unitary_synthesis_method, unitary_synthesis_plugin_config, hls_config, init_method, optimization_method, dt, _skip_target)\u001b[0m\n\u001b[1;32m    279\u001b[0m inst_map \u001b[38;5;241m=\u001b[39m _parse_inst_map(inst_map, backend)\n\u001b[1;32m    280\u001b[0m \u001b[38;5;66;03m# The basis gates parser will set _skip_target to True if a custom basis gate is found\u001b[39;00m\n\u001b[1;32m    281\u001b[0m \u001b[38;5;66;03m# (known edge case).\u001b[39;00m\n\u001b[0;32m--> 282\u001b[0m basis_gates, name_mapping, _skip_target \u001b[38;5;241m=\u001b[39m \u001b[43m_parse_basis_gates\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    283\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbasis_gates\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbackend\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minst_map\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m_skip_target\u001b[49m\n\u001b[1;32m    284\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    285\u001b[0m coupling_map \u001b[38;5;241m=\u001b[39m _parse_coupling_map(coupling_map, backend)\n\u001b[1;32m    287\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m target \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/qiskit/transpiler/preset_passmanagers/generate_preset_pass_manager.py:416\u001b[0m, in \u001b[0;36m_parse_basis_gates\u001b[0;34m(basis_gates, backend, inst_map, skip_target)\u001b[0m\n\u001b[1;32m    412\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mlist\u001b[39m(instructions), name_mapping, skip_target\n\u001b[1;32m    414\u001b[0m instructions \u001b[38;5;241m=\u001b[39m instructions \u001b[38;5;129;01mor\u001b[39;00m backend\u001b[38;5;241m.\u001b[39moperation_names\n\u001b[1;32m    415\u001b[0m name_mapping\u001b[38;5;241m.\u001b[39mupdate(\n\u001b[0;32m--> 416\u001b[0m     {name: backend\u001b[38;5;241m.\u001b[39mtarget\u001b[38;5;241m.\u001b[39moperation_from_name(name) \u001b[38;5;28;01mfor\u001b[39;00m name \u001b[38;5;129;01min\u001b[39;00m backend\u001b[38;5;241m.\u001b[39moperation_names}\n\u001b[1;32m    417\u001b[0m )\n\u001b[1;32m    419\u001b[0m \u001b[38;5;66;03m# Check for custom instructions before removing calibrations\u001b[39;00m\n\u001b[1;32m    420\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m inst \u001b[38;5;129;01min\u001b[39;00m instructions:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/qiskit/transpiler/preset_passmanagers/generate_preset_pass_manager.py:416\u001b[0m, in \u001b[0;36m<dictcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    412\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mlist\u001b[39m(instructions), name_mapping, skip_target\n\u001b[1;32m    414\u001b[0m instructions \u001b[38;5;241m=\u001b[39m instructions \u001b[38;5;129;01mor\u001b[39;00m backend\u001b[38;5;241m.\u001b[39moperation_names\n\u001b[1;32m    415\u001b[0m name_mapping\u001b[38;5;241m.\u001b[39mupdate(\n\u001b[0;32m--> 416\u001b[0m     {name: \u001b[43mbackend\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtarget\u001b[49m\u001b[38;5;241m.\u001b[39moperation_from_name(name) \u001b[38;5;28;01mfor\u001b[39;00m name \u001b[38;5;129;01min\u001b[39;00m backend\u001b[38;5;241m.\u001b[39moperation_names}\n\u001b[1;32m    417\u001b[0m )\n\u001b[1;32m    419\u001b[0m \u001b[38;5;66;03m# Check for custom instructions before removing calibrations\u001b[39;00m\n\u001b[1;32m    420\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m inst \u001b[38;5;129;01min\u001b[39;00m instructions:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/qiskit_aer/backends/aerbackend.py:262\u001b[0m, in \u001b[0;36mAerBackend.target\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    259\u001b[0m properties \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mproperties()\n\u001b[1;32m    261\u001b[0m \u001b[38;5;66;03m# Load Qiskit object representation\u001b[39;00m\n\u001b[0;32m--> 262\u001b[0m qiskit_inst_mapping \u001b[38;5;241m=\u001b[39m \u001b[43mget_standard_gate_name_mapping\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    263\u001b[0m qiskit_inst_mapping\u001b[38;5;241m.\u001b[39mupdate(NAME_MAPPING)\n\u001b[1;32m    265\u001b[0m qiskit_control_flow_mapping \u001b[38;5;241m=\u001b[39m {\n\u001b[1;32m    266\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mif_else\u001b[39m\u001b[38;5;124m\"\u001b[39m: IfElseOp,\n\u001b[1;32m    267\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mwhile_loop\u001b[39m\u001b[38;5;124m\"\u001b[39m: WhileLoopOp,\n\u001b[1;32m    268\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfor_loop\u001b[39m\u001b[38;5;124m\"\u001b[39m: ForLoopOp,\n\u001b[1;32m    269\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mswitch_case\u001b[39m\u001b[38;5;124m\"\u001b[39m: SwitchCaseOp,\n\u001b[1;32m    270\u001b[0m }\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/qiskit/circuit/library/standard_gates/__init__.py:78\u001b[0m, in \u001b[0;36mget_standard_gate_name_mapping\u001b[0;34m()\u001b[0m\n\u001b[1;32m     62\u001b[0m time \u001b[38;5;241m=\u001b[39m Parameter(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mt\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     64\u001b[0m \u001b[38;5;66;03m# Standard gates library mapping, multicontrolled gates not included since they're\u001b[39;00m\n\u001b[1;32m     65\u001b[0m \u001b[38;5;66;03m# variable width\u001b[39;00m\n\u001b[1;32m     66\u001b[0m gates \u001b[38;5;241m=\u001b[39m [\n\u001b[1;32m     67\u001b[0m     IGate(),\n\u001b[1;32m     68\u001b[0m     SXGate(),\n\u001b[1;32m     69\u001b[0m     XGate(),\n\u001b[1;32m     70\u001b[0m     CXGate(),\n\u001b[1;32m     71\u001b[0m     RZGate(lambda_),\n\u001b[1;32m     72\u001b[0m     RGate(theta, phi),\n\u001b[1;32m     73\u001b[0m     C3SXGate(),\n\u001b[1;32m     74\u001b[0m     CCXGate(),\n\u001b[1;32m     75\u001b[0m     DCXGate(),\n\u001b[1;32m     76\u001b[0m     CHGate(),\n\u001b[1;32m     77\u001b[0m     CPhaseGate(theta),\n\u001b[0;32m---> 78\u001b[0m     \u001b[43mCRXGate\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtheta\u001b[49m\u001b[43m)\u001b[49m,\n\u001b[1;32m     79\u001b[0m     CRYGate(theta),\n\u001b[1;32m     80\u001b[0m     CRZGate(theta),\n\u001b[1;32m     81\u001b[0m     CSwapGate(),\n\u001b[1;32m     82\u001b[0m     CSXGate(),\n\u001b[1;32m     83\u001b[0m     CUGate(theta, phi, lambda_, gamma),\n\u001b[1;32m     84\u001b[0m     CU1Gate(lambda_),\n\u001b[1;32m     85\u001b[0m     CU3Gate(theta, phi, lambda_),\n\u001b[1;32m     86\u001b[0m     CYGate(),\n\u001b[1;32m     87\u001b[0m     CZGate(),\n\u001b[1;32m     88\u001b[0m     CCZGate(),\n\u001b[1;32m     89\u001b[0m     GlobalPhaseGate(theta),\n\u001b[1;32m     90\u001b[0m     HGate(),\n\u001b[1;32m     91\u001b[0m     PhaseGate(theta),\n\u001b[1;32m     92\u001b[0m     RCCXGate(),\n\u001b[1;32m     93\u001b[0m     RC3XGate(),\n\u001b[1;32m     94\u001b[0m     RXGate(theta),\n\u001b[1;32m     95\u001b[0m     RXXGate(theta),\n\u001b[1;32m     96\u001b[0m     RYGate(theta),\n\u001b[1;32m     97\u001b[0m     RYYGate(theta),\n\u001b[1;32m     98\u001b[0m     RZZGate(theta),\n\u001b[1;32m     99\u001b[0m     RZXGate(theta),\n\u001b[1;32m    100\u001b[0m     XXMinusYYGate(theta, beta),\n\u001b[1;32m    101\u001b[0m     XXPlusYYGate(theta, beta),\n\u001b[1;32m    102\u001b[0m     ECRGate(),\n\u001b[1;32m    103\u001b[0m     SGate(),\n\u001b[1;32m    104\u001b[0m     SdgGate(),\n\u001b[1;32m    105\u001b[0m     CSGate(),\n\u001b[1;32m    106\u001b[0m     CSdgGate(),\n\u001b[1;32m    107\u001b[0m     SwapGate(),\n\u001b[1;32m    108\u001b[0m     iSwapGate(),\n\u001b[1;32m    109\u001b[0m     SXdgGate(),\n\u001b[1;32m    110\u001b[0m     TGate(),\n\u001b[1;32m    111\u001b[0m     TdgGate(),\n\u001b[1;32m    112\u001b[0m     UGate(theta, phi, lambda_),\n\u001b[1;32m    113\u001b[0m     U1Gate(lambda_),\n\u001b[1;32m    114\u001b[0m     U2Gate(phi, lambda_),\n\u001b[1;32m    115\u001b[0m     U3Gate(theta, phi, lambda_),\n\u001b[1;32m    116\u001b[0m     YGate(),\n\u001b[1;32m    117\u001b[0m     ZGate(),\n\u001b[1;32m    118\u001b[0m     Delay(time),\n\u001b[1;32m    119\u001b[0m     Reset(),\n\u001b[1;32m    120\u001b[0m     Measure(),\n\u001b[1;32m    121\u001b[0m ]\n\u001b[1;32m    122\u001b[0m name_mapping \u001b[38;5;241m=\u001b[39m {gate\u001b[38;5;241m.\u001b[39mname: gate \u001b[38;5;28;01mfor\u001b[39;00m gate \u001b[38;5;129;01min\u001b[39;00m gates}\n\u001b[1;32m    123\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m name_mapping\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/qiskit/circuit/library/standard_gates/rx.py:232\u001b[0m, in \u001b[0;36mCRXGate.__init__\u001b[0;34m(self, theta, label, ctrl_state, duration, unit, _base_label)\u001b[0m\n\u001b[1;32m    214\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__init__\u001b[39m(\n\u001b[1;32m    215\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m    216\u001b[0m     theta: ParameterValueType,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    222\u001b[0m     _base_label\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m    223\u001b[0m ):\n\u001b[1;32m    224\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Create new CRX gate.\"\"\"\u001b[39;00m\n\u001b[1;32m    225\u001b[0m     \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__init__\u001b[39m(\n\u001b[1;32m    226\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcrx\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m    227\u001b[0m         \u001b[38;5;241m2\u001b[39m,\n\u001b[1;32m    228\u001b[0m         [theta],\n\u001b[1;32m    229\u001b[0m         num_ctrl_qubits\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m,\n\u001b[1;32m    230\u001b[0m         label\u001b[38;5;241m=\u001b[39mlabel,\n\u001b[1;32m    231\u001b[0m         ctrl_state\u001b[38;5;241m=\u001b[39mctrl_state,\n\u001b[0;32m--> 232\u001b[0m         base_gate\u001b[38;5;241m=\u001b[39m\u001b[43mRXGate\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtheta\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlabel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m_base_label\u001b[49m\u001b[43m)\u001b[49m,\n\u001b[1;32m    233\u001b[0m     )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/qiskit/circuit/library/standard_gates/rx.py:62\u001b[0m, in \u001b[0;36mRXGate.__init__\u001b[0;34m(self, theta, label, duration, unit)\u001b[0m\n\u001b[1;32m     58\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__init__\u001b[39m(\n\u001b[1;32m     59\u001b[0m     \u001b[38;5;28mself\u001b[39m, theta: ParameterValueType, label: Optional[\u001b[38;5;28mstr\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m, duration\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, unit\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdt\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m     60\u001b[0m ):\n\u001b[1;32m     61\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Create new RX gate.\"\"\"\u001b[39;00m\n\u001b[0;32m---> 62\u001b[0m     \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[38;5;21;43m__init__\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mrx\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m[\u001b[49m\u001b[43mtheta\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlabel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlabel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mduration\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mduration\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43munit\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43munit\u001b[49m\u001b[43m)\u001b[49m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"},{"name":"stdout","text":"CPU times: user 9.97 s, sys: 205 ms, total: 10.2 s\nWall time: 10.2 s\n","output_type":"stream"}]},{"cell_type":"code","source":"plot_results(SNR_RANGE, results)","metadata":{"_uuid":"e7413b20-c14b-48ac-ab29-5f7d15c1f99f","_cell_guid":"0c821fa8-6326-4b00-ae8e-6910449a1165","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-10-02T09:14:34.354470Z","iopub.execute_input":"2024-10-02T09:14:34.354859Z","iopub.status.idle":"2024-10-02T09:14:34.388195Z","shell.execute_reply.started":"2024-10-02T09:14:34.354818Z","shell.execute_reply":"2024-10-02T09:14:34.386568Z"},"trusted":true},"execution_count":33,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[33], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m plot_results(SNR_RANGE, \u001b[43mresults\u001b[49m)\n","\u001b[0;31mNameError\u001b[0m: name 'results' is not defined"],"ename":"NameError","evalue":"name 'results' is not defined","output_type":"error"}]},{"cell_type":"code","source":"","metadata":{"_uuid":"15349b2a-b61d-42af-8ecf-904985291f64","_cell_guid":"62ee8791-c541-4b3a-824f-7f06fc117c27","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}