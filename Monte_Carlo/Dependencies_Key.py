{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30775,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\nimport os\nimport warnings\nfrom functools import reduce\nimport time\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom qiskit import *\nfrom qiskit_aer import Aer\n# from qiskit_ibm_runtime import QiskitRuntimeService, SamplerV2 as Sampler\n\nfrom joblib import Parallel, delayed\nfrom random import randrange\nfrom scipy import stats  # For confidence intervals\n\nfrom IPython.display import clear_output\n\nnp.set_printoptions(precision = 4, linewidth = 100, threshold = np.inf)\n\n'''\n0) Protocol: BB84, E91\n1) Key Generation: Bases, Bits\n2) Noise Model: Classical, Hybrid, Quantum\n3) Measurement: Simulator, IBM Runtime\n4) Information Recon.\n5) Spotting: 1/3rd\n6) Error Correction: Hamming, Cascade, LDPC and others\n7) Privacy Amp.: SHA256/hashing\n8) Deploy on TDC: Encrypt/Decrypt\n'''\n\n###########################################################################################################################################\ndef track(itr, lim, string = None, length = None):\n\tif length is None: length = 20\n\tif string is None: string = 'Iteration'\n\n\tfactor = (itr+1)*length//lim\n\tprint(f\"\\r {string}: [{'='*int(factor)}>{' '*(length-int(factor))}] {itr+1}/{lim}\", end = '')\n\n\n########\ndef snr2ber(snr_db, lin_return = False, signal_power = 0.15, medium = 'wired'):    # medium could be 'wired' or 'wireless'\n\tsnr_linear = 10**(snr_db/10)\n\n\tif medium == 'wireless':\n\t\tBER = 1/(2*snr_linear)\n\n\telif medium == 'wired':\n\t\tBER = np.exp(-snr_linear/2)/2\n\t\t\t\n\tnoise_power = signal_power/snr_linear\n\n\tif lin_return: return BER, snr_linear\n\telse: return BER\n\n\n###########\n# Calculate 95% Confidence Intervals\ndef confidence_interval(data, confidence=0.95):\n    mean = np.mean(data)\n    n = len(data)\n    se = stats.sem(data)\n    h = se * stats.t.ppf((1 + confidence) / 2., n-1)\n    return mean, h\n\n\n###########\ndef print_info(var, string = None, info = None):\n\tif info is None:\n\t\tinfo = False\n\tif string is None:\n\t\tstring = ''\n\n\tprint(f'\\n######## {string}', end = '\\t\\t\\t')\n\t\n\tvar_size = len(var)\n\tdim = len(var[0])\n\tprint(f' ----- Number of Variables: {var_size}, \\t Number of Elements: {dim}')\n\n\n\tif dim != 1:\n\n\t\tif info:\n\t\t\tprint(f\"-> Element Type: {type(var[0][0])}\", end = '\\n')\n\t\t\tprint(f\"-> Variable Types: {', '.join([str(type(var[i])) for i in range(var_size)])}\", end = '\\t')\n\t\t\t\n\t\t\ttry:\n\t\t\t\tprint(f\" ---> Variable Shapes: {', '.join([ str(var[i].shape) for i in range(var_size) ])}\")\n\t\t\texcept:\n\t\t\t\tprint(f\" ---> Variable Lengths: {', '.join([ str(len(var[i])) for i in range(var_size) ])}\")\n\n\t\tprint('->', end = '\\t')\n\t\tfor i in range(dim):\n\t\t\tend = ' '\n\t\t\tend += '<' if var[0][i] != var[1][i] else ''\n\t\t\tend += '!' if var_size == 4 and var[2][i] != var[3][i] else ' '\n\t\t\tend += '   '\n\t\t\t\n\t\t\tdisplay = ''.join([str(var[v][i]) for v in range(var_size)])\n\t\t\tprint(display, end = end)\n\t\t\t# print(display, end = '    ' if all(var[0][i] == var[v][i] for v in range(2)) else '<-  ')\n\n\t\n\telif dim == 1:\n\t\tif info: print(f\"->  Element Type: {type(var[0])}, \\t Variable Type: {type(var)}, {len(var)}\", sep = '\\t')\n\t\tprint('-> \\t', '  '.join([''.join(map(str, var[i:i+8])) for i in range(0, var_size, 8)]))\n\n\tprint('')\n\n\n########## Hamming\nclass HammingCode:\n\tdef __init__(self, order = None):\n\t\tif order is None: self.order = 6\n\t\t\n\tdef Apply_on(self, block, key_index = None):\n\t# block = array\n\t\t\"\"\" Detects the location of the error in the bit string and returns corrected information. \"\"\"\n\t\t# Default value\n\t\tif key_index is None: key_index = 0\n\t\t\n\t\t# order = self.calculate_order(len(block))\n\t\t\n\t\t# Detect the error location using bitwise XOR on indices of '1' bits.\n\t\tloc = reduce(lambda x, y: x ^ y, [i for i, bit in enumerate(block) if bit == 1])\n\t\t\n\t\t# Calculate the parity of the entire block.\n\t\tcurrent_parity = sum(block[1:]) % 2\n\t\t\n\t\tif current_parity == block[0]:\n\t\t\tif loc != 0:\n\t\t\t\terr_count = 2\n\t\t\t\tprint(f\" \\t - EVEN number of errors(> 1) found \")\n\n\t\t\telif loc == 0:\n\t\t\t\terr_count = 0\n\t\t\t\tprint(f\"\\n \\t - NO error could be detected\")\n\t\t\t\t\n\t\telif current_parity != block[0]:\n\t\t\terr_count = 1\n\t\t\tprint(f\"\\n \\t - ODD number of errors found(Could be >=3) \\n \\t # Considering: \", end = '')\n\t\t\tKey.errors_corrected[key_index] = 1\n\t\t\t\n\t\treturn err_count, loc\n\n\t\n\tdef calculate_order(self, bits_len):\n\t\torder = int(np.ceil(np.log2(bits_len)) - 1)\n\t\tflag = 1\n\t\twhile flag:\n\t\t\torder = order + 1\n\t\t\tflag = bits_len - (2**order - order - 1)\n\t\t\tflag = max(0, flag)\n\t\t\t\n\t\treturn order\n\n\n\tdef init_parity_dict(self, order, ini = 0):\n\t\t\"\"\" Initializes the parity dictionary for the given order and binary representations of parity bits. \"\"\"\n\t\tPARITY_DICT = {0: ini, **{2**i: ini for i in range(order)}}\n\t\tif ini not in [0, 1]: warnings.warn(f\"The PARITY_DICT is being initialized to a value of {ini}\", category=RuntimeWarning, stacklevel=2)\n\n\t\treturn PARITY_DICT\n\t\t\n\n\tdef create_block_w_parity(self, bits, PARITY_DICT, encode = None):\n\t# bits = array\n\t\t\"\"\" Generates the parity block, with parity bits embedded in the bit string. \"\"\"\n\t\t#  Setting the default value\n\t\tif encode is None: encode = True\n\t\t\n\t\torder = len(PARITY_DICT) - 1\n\t\t# Initialize parity block with zeros\n\t\tblock = np.zeros(2**order).astype('uint8')\n\n\t\t# Fill in the data and parity bits\n\t\tj = 0\n\t\tfor i in range(2**order):\n\t\t\tif i in PARITY_DICT:\n\t\t\t\tblock[i] = PARITY_DICT[i]\n\t\t\t\t\n\t\t\telif j < len(bits):\n\t\t\t\tblock[i] = bits[j]\n\t\t\t\tj += 1\n\n\t\tnum_fillers = (2**order - len(PARITY_DICT)) - len(bits)    # Assuming bits is longer than required \n\t\t\t\t# print(f'\\n {PARITY_DICT =}, \\n {type(block[0]) = }, \\n {block = }')     \n\t\t\n\t\t# Encode parity into the block if it is alice's\n\t\tif encode: block, PARITY_DICT = self.encode_parity(block, PARITY_DICT)\n\t\t\n\t\treturn block, PARITY_DICT, num_fillers\n\n\n\tdef encode_parity(self, block, PARITY_DICT):\n\t# block = array\n\t\t\"\"\" Encodes the parity bits into the bit string using Hamming code rules. \"\"\"\n\t\t# order = self.calculate_order(len(block))\n\t\torder = len(PARITY_DICT) - 1\n\t\tsub_block_len = int(2**(order - 1))\n\t\tparity_locs_p = np.zeros((len(PARITY_DICT), sub_block_len)).astype(int)    # An array to store the locations affecting the parity p\n\n\t\tfor p_rep in range(1, order + 1):    # p_rep = parity representation bit\n\t\t\tp_rep_index = 2**(p_rep - 1)\n\t\t\tp_parity = 0\n\n\t\t\tfor i in range(sub_block_len):\n\t\t\t\tbinary_i = bin(i)[2:].zfill(order-1)\n\t\t\t\tbinary_i = binary_i[:order - p_rep] + '1' + binary_i[order - p_rep:]\n\t\t\t\tblock_i = int(binary_i, base=2)\n\t\t\t\tparity_locs_p[p_rep, i] = block_i\n\n\t\t\t\tif p_rep_index != block_i:    # To avoid the parity of the p_rep bits themselves\n\t\t\t\t\tp_parity = np.mod(p_parity + int(block[block_i]), 2)\n\n\t\t\tPARITY_DICT[p_rep_index] = p_parity\n\t\t\tblock[p_rep_index] = PARITY_DICT[p_rep_index]\n\n\t\t# Calculate the overall parity and assign to bit 0\n\t\tPARITY_DICT[0] = sum(block[1:].astype(int)) % 2\n\t\tblock[0] = PARITY_DICT[0]\n\n\t\treturn block, PARITY_DICT\n\n\n############\nclass AliceBob:\n\tdef __init__(self, name):\n\t\tself.name = name\n\t\tself.bases = np.array([], dtype = str)\n\t\tself.bit_string = np.array([], dtype = str)\n\t\tself.key = np.array([], dtype = str)    # After spotting\n\n\tdef current_length(self):\n\t\treturn len(self.bit_string)\n\n\n# Generate, encode(in states), noise, measurement\nclass Key(AliceBob):\n\n\tlog = ' Class created'\n\tnum_keys = 0\n\terror_prob = 0    # Equivalent to BER\n\n\tif not memory_efficient:\n\t\tkept = np.array([], int)\n\t\tdiscarded = np.array([], int)\n\t\tBitsReservoir = [np.array([], dtype='<U11'), np.array([], dtype='<U11')]  # Use a sufficiently large dtype\n\t\tBasesReservoir = np.array([], dtype='<U1')  # Assuming bases are single-character strings ('X', 'Z')\n\t\tReservoir = {}\n\t\t# error_prob = snr2ber(snr_db)\n\n\tdef __init__(self, index, key_length = None, snr_db = None, *, Eve = None, signal_power = 0.15):\n\t\t# self.original_key = np.random.randint(0, 2, key_length)  # Random key\n\t\tif key_length is None: key_length = 1024\n\t\tif snr_db is None: snr_db = 15\n\t\t\t\n\t\tself.key_length = key_length    # Desired key length. NOT to be confused with the actual key length\n\t\tself.snr_db = snr_db\n\t\tself.signal_power = signal_power\n\t\tself.qber = 0.    # Before CE. All the errors are due to quantum disturbances\n\t\tself.ber = 0.\n\t\tself.index = index\n\t\t\n\t\tself.sift_indices = None\n\t\tself.final_key = np.array([], dtype='<U11')   # The key object itself can serve as a final key\n\t\tself.qc = [QuantumCircuit(1, 1) for _ in range(self.key_length)]    # Initializing the circuit\n\t\tself.remarks = 'Initialized'\n\t\tself.errors_induced = np.array([0, 0])    # [bit-flip, phase-flip]\n\t\tself.status = ''\n\t\t\n\t\tself.Alice = AliceBob(\"Alice\")\n\t\tself.Bob = AliceBob(\"Bob\")\n\t\tif Eve is not None: self.Eve = AliceBob(\"Eve\")\n\n\t\t# The length that's needed to create a key of length key_length\n\t\tself.redundant_len = int(self.key_length + np.ceil(np.log2(self.key_length)) + 1)\n### bits, bases = str, str\n\n\tdef describe(self):\n\t\t# print(f' {self.original_key = }, type: {type(self.original_key)}, {len(self.original_key) = }')\n\t\tprint(f' {self.qber = },\\t type: {type(self.qber)}')\n\t\tprint(f' {self.ber = },\\t type: {type(self.ber)}')\n\t\tprint(f' Desired Key Length: {self.key_length},\\t type: {type(self.key_length)}')\n\t\tprint(f' {self.snr_db = },\\t type: {type(self.snr_db)}')\n\t\tprint(f' {self.signal_power = },\\t type: {type(self.signal_power)}')\n\t\tprint(f' {self.index = },\\t type: {type(self.index)}')\n\t\t\n\t\tprint(f' {self.sift_indices = },\\t type: {type(self.sift_indices)},\\t {sum(self.sift_indices) = }')\n\t\tprint(f' {self.final_key = },\\t type: {type(self.final_key)},\\t {len(self.final_key) = }')\n\t\tprint(f' self.qc : \\t type of elements: {type(self.qc[0])},\\t {len(self.qc) = }')\n\t\tprint(f' {self.remarks = },\\t type: {type(self.remarks)},\\t {len(self.remarks) = }')\n\t\tprint(f' {self.status = },\\t type: {type(self.status)},\\t {len(self.status) = }')\n\t\t\n\t\tprint(f' {self.errors_induced = },\\t type: {type(self.errors_induced)},\\t {len(self.errors_induced) = }')\n\n\t\tprint(f' {self.Alice = },\\t type: {type(self.Alice)}')\n\t\tprint(f' {self.Bob = },\\t type: {type(self.Bob)}')\n\t\tprint(f' {self.Eve = },\\t type: {type(self.Eve)}')\n\n\t\tprint(f' {self.redundant_len = },\\t type: {type(self.redundant_len)}')\n\n\t\n\tdef generate_random_bits(self, name):\n\t\t\"\"\"This function generates a random array of bits(0/1) of size = key length\"\"\"\n\t\tobj = self.Alice if name == \"Alice\" else self.Eve if name == \"Eve\" else ''\n\t\tfor _ in range(self.key_length):\n\t\t\trand_bit = np.random.randint(0, 2)     # Flip Coin\n\t\t\tobj.bit_string = np.concatenate((obj.bit_string, [rand_bit]))\n\n\t\tself.remarks += f'\\n {name}: Random Bits generated'\n### bits, bases = str, str\n\t\n\tdef generate_random_bases(self, name):\n\t\t\"\"\"This function selects a random basis for each bit\"\"\"\n\t\tobj = self.Alice if name == \"Alice\" else self.Bob if name == \"Bob\" else self.Eve if name == \"Eve\" else ''\n\t\tfor _ in range(self.key_length):\n\t\t\trandBasis = np.random.randint(0, 2)     # Flip Coin\n\t\t\tobj.bases = np.concatenate((obj.bases, [\"X\"] if randBasis else [\"Z\"]))\n\t\t\n\t\tself.remarks += f'\\n {name}: Random Bases generated'\n### bits, bases = str, str\n\t\t\n\tdef encode_states(self, name):\n\t\t\"\"\"This function encodes each bit into the given basis.\"\"\"      \n\t\tobj = self.Alice if name == \"Alice\" else self.Eve if name == \"Eve\" else ''\n\t\tfor i in range(self.key_length):\n\t\t\t# Possible Cases\n\t\t\tif obj.bit_string[i] == \"1\": self.qc[i].x(0)\n\t\t\tif obj.bases[i] == 'X': self.qc[i].h(0)\n\t\t\n\t\tself.remarks += f'\\n {name}: States Encoded'\n\n\t\t\n\tdef NoisyChannel(self):\n\t\t''' \n\t\tSimulates a noisy quantum channel where Pauli errors (X - bit flip; Z - phase flip)\n\t\toccur considering SNR.\n\t\t\n\t\tParameters:\n\t\t- errors: A list to keep track of the number of bit-flip (X) and phase-flip (Z) errors.\n\t\t- snr_db: Signal-to-Noise Ratio in dB. This affects the probability of errors.\n\t\t\n\t\tReturns:\n\t\t- errors: Updated list with the number of X and Z errors introduced.\n\t\t'''\n\t\t# Calculate BER\n\t\t# Key.error_prob = snr2ber(self.snr_db)\n\t\t# print(f'BER = {Key.error_prob}')\n\t\tself.errors_induced[0] = 0\n\t\tself.errors_induced[1] = 0\n\t\t\t   \n\t\t# Simulate AWGN effect by modifying measurement outcomes based on noise\n\t\tfor i in range(self.key_length):\n\t\t\tif np.random.random() < Key.error_prob:\n\t\t\t\tself.qc[i].x(0)  # Simulate a bit-flip error due to noise\n\t\t\t\tself.errors_induced[0] += 1\n\t\t\t\t\n\t\t\tif np.random.random() < Key.error_prob:\n\t\t\t\tself.qc[i].z(0)  # Simulate a phase-flip error due to noise\n\t\t\t\tself.errors_induced[1] += 1\n\n\t\tself.remarks += '\\n Key Transmitted'    # \\n \"bases\" AND \"bit_string\" RESETTED'\n\n\n#     def real_qc(self, name):\n#         \"\"\"This function measures each qubit in the corresponding basis chosen for it.\"\"\"\n#         obj = self.Bob if name == \"Bob\" else self.Eve if name == \"Eve\" else ''\n\n#         service = QiskitRuntimeService()\n#         backend = service.least_busy(operational = True, simulator = False)\n\t\n\n#         for i in range(self.key_length):\n#             if obj.bases[i] == \"X\":\n#                 self.qc[i].h(0)\n\n#             self.qc[i].measure(0, 0)\n\t\n#             sampler = Sampler(backend)\n#             job = sampler.run([example_circuit])\n#             # print(f\"job id: {job.job_id()}\")\n#             result = job.result()\n#             # print(result)\n\n#             counts = result.get_counts()\n#             measured_bit = max(counts, key=counts.get)     # Max doesn't matter for simulator since there is only one shot.\n\n#             obj.bit_string = np.concatenate((obj.bit_string, [measured_bit]))\n\n#         self.remarks += f'\\n {name}: States Measured'\n# ### bits, bases = str, str\n\n\n\tdef measure(self, name):\n\t\t\"\"\"This function measures each qubit in the corresponding basis chosen for it.\"\"\"\n\t\tobj = self.Bob if name == \"Bob\" else self.Eve if name == \"Eve\" else ''\n\n\t\tfor i in range(self.key_length):\n\t\t\tif obj.bases[i] == \"X\": \n\t\t\t\tself.qc[i].h(0)\n\n\t\t\tself.qc[i].measure(0, 0)\n\n\t\t\t# Execute on Simulator\n\t\t\tsimulator = Aer.get_backend('qasm_simulator')\n\t\t\ttranspiled_circuit = transpile(self.qc[i], simulator)\n\t\t\tresult = simulator.run(transpiled_circuit, shots = 1).result()\n\t\t\tcounts = result.get_counts()\n\t\t\tmeasured_bit = max(counts, key = counts.get)     # Max doesn't matter for simulator since there is only one shot.\n\t\n\t\t\tobj.bit_string = np.concatenate((obj.bit_string, [measured_bit]))\n\t\t\n\t\tself.remarks += f'\\n {name}: States Measured'\n### bits, bases = str, str\n\t\n\tdef sift(self):\n\t\t\"\"\"This function sifts through the bases of both Alice and Bob and checks for the ones that match\"\"\"\n\t\tself.sift_indices = (self.Bob.bases == self.Alice.bases)    # BROADCAST = self.Alice.bases\n\t\t\n\t\tself.Bob.bases = self.Bob.bases[self.sift_indices]\n\t\tself.Alice.bases = self.Alice.bases[self.sift_indices]\n\n\t\tself.Bob.bit_string = np.array(self.Bob.bit_string)[self.sift_indices]\n\t\tself.Alice.bit_string = np.array(self.Alice.bit_string)[self.sift_indices]\n\t\n\t\t# bob_bits = ''.join(bob_bits)\n\t\tself.remarks += f'\\n Key Sifted. Sift length = {sum(self.sift_indices)}'\n### bits, bases = Array, str\n\n\tdef calculate_err(self, err = \"qber\"):    # Observer: This data is available only because we are observing from top. Won't be available to users.\n\t\t\"\"\"This function calculates the QBER before applying channel encoding. Can not be used in actual implementation. Only for simulations\"\"\"\n\t\tif err == \"qber\": self.qber =  np.sum(self.Alice.bit_string != self.Bob.bit_string)/self.Bob.current_length()\n\t\telif err == \"ber\": self.ber =  np.sum(self.Alice.bit_string != self.Bob.bit_string)/self.Bob.current_length()\n\n\t\tself.remarks += f'\\n {err} calculated'\n\n\n\tdef append_reserves(self, reserve_i):\n\n\t\talice_bit_string = np.array(self.Alice.bit_string[reserve_i:], dtype='<U11')  # Adjust dtype to match\t\t\n\t\tbob_bit_string = np.array(self.Bob.bit_string[reserve_i:], dtype='<U11')  # Adjust dtype to match\n\n\t\tif not memory_efficient:\n\t\t\tKey.Reservoir.update({self.index: (self.Bob.bases, self.Bob.bit_string, self.Alice.bit_string)})\n\t\t\tKey.BitsReservoir[0] = np.concatenate((Key.BitsReservoir[0], alice_bit_string))\n\t\t\tKey.BitsReservoir[1] = np.concatenate((Key.BitsReservoir[1], bob_bit_string))\n\t\t\tKey.BasesReservoir = np.concatenate((Key.BasesReservoir, self.Bob.bases[reserve_i:]))\n\n\t\tself.Alice.bit_string = self.Alice.bit_string[:reserve_i]\n\t\tself.Bob.bit_string = self.Bob.bit_string[:reserve_i]\n\t\tself.Alice.bases = self.Alice.bases[:reserve_i]\n\t\tself.Bob.bases = self.Bob.bases[:reserve_i]\n# Bits/Bases trimmed\n\n\tdef fill_block(self, order):\n\t\tfill_length = int(2**order - order - 1) - sum(self.sift_indices)\n\t\tfiller = np.zeros(fill_length)\n\t\treturn filler\n\t\t\n\t\n\tdef correct(self, channel_code = None):\n\n\t\tif channel_code is None: channel_code = HammingCode()\n\n\t\tself.Alice.bit_string[:] = np.array([int(bit) for bit in self.Alice.bit_string])\n\t\tself.Bob.bit_string[:] = np.array([int(bit) for bit in self.Bob.bit_string])\n\t\tblock_order = channel_code.calculate_order(sum(self.sift_indices))\n\n\t\t# Creating the PARITY dictionary to be sent on a classical channel\n\t\tPARITY_DICT = channel_code.init_parity_dict(block_order)\n\t\t# Embedding the PARITY bits in alice's bit strings to form a block\n\t\tAlice_key_block, PARITY_DICT, num_fillers = channel_code.create_block_w_parity(self.Alice.bit_string, PARITY_DICT, encode = True)\n\n\t\t# Broadcasting on a classical channel\n\t\tBROADCAST = PARITY_DICT\n\n\t\t# Embedding the PARITY bits(received on the classical channel from alice) in bob's bit strings to form a block\n\t\tBob_key_block, _, _ = channel_code.create_block_w_parity(self.Bob.bit_string, BROADCAST, encode = False)\n\n\t\t# reserve_i = int(self.Alice.current_length() - num_extras)\n\t\t# self.append_reserves(reserve_i)\n\n\t\tprint(f'\\t# {PARITY_DICT = }')\n\t\tprint_info([Alice_key_block, Bob_key_block], '[Extended] Key BLOCKS(Alice-Bob Parity Encoded): ', True)\n\t\tprint_info([self.Alice.bit_string, self.Bob.bit_string, self.Alice.bases, self.Bob.bases], 'Key strings(During Correction -- Not corrected): ', True)\n\t\t\n\t\t# Applying the hamming algorithm to: detect upto 2 bit errors and correct a single-bit error. \n\t\terr_count, loc = channel_code.Apply_on(Bob_key_block, self.index)\n\t\tprint(f\" \\t # {err_count = }, {loc = }, binary_rep = {bin(loc)[2:].zfill(block_order)}\")\n\t\t\n\t\tif err_count != 0:\n\t\t\ttry: \n\t\t\t\tif err_count == 1: \n\t\t\t\t\tBob_key_block[loc] = np.mod(Bob_key_block[loc] + 1, 2)\n\t\t\t\t\tprint(\" \\t - ERROR CORRECTED! Keeping the Key!\")\n\t\t\t\t\tself.status = 'keep'\n\t\n\t\t\t\t\tif not memory_efficient:\n\t\t\t\t\t\tKey.kept = np.concatenate((Key.kept, [self.index]))\n\n\t\t\t\telse:\n\t\t\t\t\tprint(\" \\t - Discarding the Key!\")\n\t\t\t\t\tself.status = 'discard'\n\n\t\t\t\t\tif not memory_efficient:\n\t\t\t\t\t\tKey.discarded = np.concatenate((Key.discarded, [self.index]))\n\t\t\t\t\t\n\t\t\texcept:\n\t\t\t\traise KeyError('Location Invalid')\n\n\t\tfor j, bit in enumerate(Bob_key_block):    # Or alice_bits, since both should be the same\n\t\t\tif j not in PARITY_DICT:\n\t\t\t\tself.Bob.key = np.concatenate((self.Bob.key, [bit]))\n\n\t\t# print(f'\\t - Length of Sifted Key = {sum(self.sift_indices)}')\n\t\tself.Bob.key = self.Bob.key[:sum(self.sift_indices)]\n\t\tself.Bob.bit_string = self.Bob.key\n\t\t\n\t\tself.Alice.bit_string = np.array(self.Alice.bit_string, dtype='<U11')\n\t\t# self.Alice.bit_string = np.concatenate((self.Alice.bit_string, np.zeros(num_fillers, dtype='<U11')))\n\n\t\tself.remarks += f'\\n {err_count} error(s) corrected'\n### bits, bases = str, str\n\n\t\n\t@classmethod\n\tdef distribute(cls, Keys, num = None, size = None):\n\n\t\tif num == None: num = 16\n\t\tif size == None: size = 64\n\t\t\t\n\t\t# Accumulating all the keys and bases in their respective reservoirs\n\t\tfor i in range(cls.num_keys):\n\t\t\t# Convert Alice's bit strings to strings and concatenate\n\t\t\talice_bit_string = np.array(Keys[i].Alice.bit_string, dtype = '<U11')  # Adjust dtype to match\n\t\t\tcls.BitsReservoir[0] = np.concatenate((cls.BitsReservoir[0], alice_bit_string))\n\t\t\t\n\t\t\tbob_bit_string = np.array(Keys[i].Bob.bit_string, dtype = '<U11')  # Adjust dtype to match\n\t\t\tcls.BitsReservoir[1] = np.concatenate((cls.BitsReservoir[1], bob_bit_string))\n\n\t\t\tcls.BasesReservoir = np.concatenate((cls.BasesReservoir, Keys[i].Bob.bases))\n\t\t\tcls.Reservoir.update({i: (Keys[i].Bob.bases, Keys[i].Bob.bit_string, Keys[i].Alice.bit_string)})\n\n\t\t# Distributing equal length keys to each key\n\t\tcls.ReservoirLen = len(Key.BitsReservoir[0])\n\t\t\n\t\tkey_len = int(size - np.log2(size) - 1)\n\t\tj = 0\n\t\tfor i in range(0, num):\n\t\t\t# Assign a portion of the BitsReservoir to Alice and Bob\n\t\t\tKeys[i].Alice.bit_string = cls.BitsReservoir[0][j: j+key_len]\n\t\t\tKeys[i].Alice.bases = cls.BasesReservoir[j: j+key_len]\n\t\t\tKeys[i].Bob.bit_string = cls.BitsReservoir[1][j: j+key_len]\n\t\t\tKeys[i].Bob.bases = cls.BasesReservoir[j: j+key_len]\n\t\t\tj += key_len\n\t\t\t\n\t\t# Handling excess bits and bases\n\t\tcls.excess_Alice = AliceBob(\"excess_Alice\")\n\t\tcls.excess_Bob = AliceBob(\"excess_Bob\")\n\t\t\n\t\tcls.excess_Alice.bit_string = cls.BitsReservoir[0][j:]\n\t\tcls.excess_Alice.bases = cls.BasesReservoir[j:]\n\t\tcls.excess_Bob.bit_string = cls.BitsReservoir[1][j:]\n\t\tcls.excess_Bob.bases = cls.BasesReservoir[j:]\n### bits, bases = str, str\n\n#############","metadata":{"_uuid":"38661a00-8452-4271-b14a-8f1272cda20f","_cell_guid":"41607ee7-ee86-4d9d-9014-31468e5413c0","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}